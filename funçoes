import random

def toHex(dec):

    x = (dec % 16)
    digits = "0123456789ABCDEF"
    rest = dec / 16
    if (rest == 0):
        return digits[x]
    return toHex(rest) + digits[x]

def gerarpq(k):
	ehprimo=False

	while(ehprimo==False):
		valor=random.getrandbits(128)
		ehprimo=millerrabin(valor)
		if ehprimo==True:
			primo=valor
	return primo


# exponenciacao modular
def expomod(base,expo,mod):
	R=1
	while expo!=0:
		if expo%2==1:
			R = (R*base)%mod
			expo=(expo-1)/2
		else:
			expo=expo/2
		base=(base*base)%mod
	return R

def millerrabin(valor,base=2): # true se primo ou pseudo-primo para a base e false para composto
	k=0
	q=valor-1
	while q%2==0:
		k+=1
		q/=2
	mill=expomod(base,q,valor)
	if mill==1 or mill==valor-1:
		return True
	i=1
	while i<k:
		mill=pow(mill,2)%valor
		if mill==valor-1:
			return True
		i=i+1
	return False

key1dec=int(gerarpq(128))

key2dec=int(gerarpq(128))

int(key1dec)
int(key2dec)
print key1dec
print key2dec

key1hex=toHex(key1dec)
key2hex=toHex(key2dec)

print key1hex
print key2hex
